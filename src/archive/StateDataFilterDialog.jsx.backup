import React, { useState, useEffect } from 'react';
import {FontAwesomeIcon} from "@fortawesome/react-fontawesome";
import {faTrash} from "@fortawesome/free-solid-svg-icons/faTrash";
import {faEdit} from "@fortawesome/free-solid-svg-icons/faEdit";
import {faCheck, faPlus, faSave} from "@fortawesome/free-solid-svg-icons";

const StateDataFilterDialog = () => {
    const [filter, setFilter] = useState({ id: null, name: '' });
    const [filterItems, setFilterItems] = useState({});
    const [userFilters, setUserFilters] = useState([]);


    const [testData, setTestData] = useState('');
    const [testResult, setTestResult] = useState(null);

    const ISM_API_BASE_URL = "http://localhost:8000"

    useEffect(() => {
        fetchUserFilters().then(r => {});
    }, []);

    const fetchUserFilters = async () => {
        try {
            var userId ="123"
            const response = await fetch(   `${ISM_API_BASE_URL}/filter/user/${userId}`);
            const data = await response.json();
            setUserFilters(data);
        } catch (error) {
            console.error('Error fetching user filters:', error);
        }
    };


    const fetchFilter = async (id) => {
        try {
            const response = await fetch(`${ISM_API_BASE_URL}/filter/${id}`);
            const data = await response.json();
            setFilter({ id: data.id, name: data.name });
            setFilterItems(data.filter_items);
        } catch (error) {
            console.error('Error fetching filter:', error);
        }
    };

    const saveFilter = async () => {
        try {
            const method = filter.id ? 'PUT' : 'POST';
            const url = filter.id ? `${ISM_API_BASE_URL}/filter/${filter.id}` : `${ISM_API_BASE_URL}/filter`;
            const response = await fetch(url, {
                method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(filter),
            });
            if (response.ok) {
                alert('Filter saved successfully!');
                fetchUserFilters();
                if (!filter.id) {
                    setFilter({ id: null, key: '', operator: 'EQ', value: '' });
                }
            }
        } catch (error) {
            console.error('Error saving filter:', error);
        }
    };

    const deleteFilter = async (id) => {
        try {
            const response = await fetch(`${ISM_API_BASE_URL}/filter/${id}`, { method: 'DELETE' });
            if (response.ok) {
                alert('Filter deleted successfully!');
                fetchUserFilters();
                if (filter.id === id) {
                    setFilter({ id: null, key: '', operator: 'EQ', value: '' });
                }
            }
        } catch (error) {
            console.error('Error deleting filter:', error);
        }
    };

    const updateFilterItem = (key, operator, value) => {
        setFilterItems(prev => ({
            ...prev,
            [key]: { key, operator, value }
        }));
    };

    const removeFilterItem = (key) => {
        setFilterItems(prev => {
            const newItems = { ...prev };
            delete newItems[key];
            return newItems;
        });
    };



    const applyFilter = async () => {
        if (!filter.id) {
            alert('Please select a filter first');
            return;
        }
        try {
            const testDataObj = JSON.parse(testData);
            const response = await fetch(`${ISM_API_BASE_URL}/apply/${filter.id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(testDataObj),
            });
            const result = await response.json();
            setTestResult(result);
        } catch (error) {
            console.error('Error applying filter:', error);
            setTestResult({ error: 'Invalid input or server error' });
        }
    };

    return (
        <div className="container mx-auto p-4">
            <h1 className="text-2xl font-bold mb-4">Filter Management</h1>

            <div className="mb-4">
                <h2 className="text-xl font-semibold mb-2">
                    {filter.id ? 'Edit Filter' : 'Create New Filter'}
                </h2>
                <div className="flex space-x-2 mb-2">
                    <div>
                        <input
                            type="text"
                            placeholder="Filter Name"
                            value={filter.name}
                            onChange={(e) => setFilter({...filter, name: e.target.value})}
                            className="border p-2 rounded"
                        />
                        {Object.values(filterItems).map((item, index) => (
                            <div key={index} className="flex space-x-2 mb-2">
                                <input
                                    type="text"
                                    placeholder="Key"
                                    value={item.key}
                                    onChange={(e) => updateFilterItem(item.key, item.operator, e.target.value)}
                                    className="border p-2 rounded"
                                />
                                <select
                                    value={item.operator}
                                    onChange={(e) => updateFilterItem(item.key, e.target.value, item.value)}
                                    className="border p-2 rounded"
                                >
                                    <option value="EQ">EQ</option>
                                    <option value="GT">GT</option>
                                    <option value="LT">LT</option>
                                </select>
                                <input
                                    type="text"
                                    placeholder="Value"
                                    value={item.value}
                                    onChange={(e) => updateFilterItem(item.key, item.operator, e.target.value)}
                                    className="border p-2 rounded"
                                />
                                <button onClick={() => removeFilterItem(item.key)}
                                        className="bg-red-500 text-white p-2 rounded">
                                    <FontAwesomeIcon icon={faTrash}/> Add Filter Item
                                </button>
                            </div>
                        ))}
                        <button onClick={() => updateFilterItem(`key${Object.keys(filterItems).length}`, 'EQ', '')}
                                className="bg-blue-500 text-white p-2 rounded">
                            <FontAwesomeIcon icon={faPlus}/> Add Filter Item
                        </button>
                    </div>
                </div>
            </div>

            <div className="mb-4">
                <h2 className="text-xl font-semibold mb-2">User Filters</h2>
                <div className="space-y-2">
                    {userFilters.map((userFilter) => (
                        <div key={userFilter.id} className="flex items-center space-x-2">
                            <span>{userFilter.key} {userFilter.operator} {userFilter.value}</span>
                            <button onClick={() => fetchFilter(userFilter.id)}
                                    className="bg-blue-500 text-white p-2 rounded">
                                <FontAwesomeIcon icon={faEdit}/>
                            </button>
                            <button onClick={() => deleteFilter(userFilter.id)}
                                    className="bg-red-500 text-white p-2 rounded">
                                <FontAwesomeIcon icon={faTrash}/>
                            </button>
                        </div>
                    ))}
                </div>
            </div>

            <div className="mb-4">
                <h2 className="text-xl font-semibold mb-2">Test Filter</h2>
                <textarea
                    value={testData}
                    onChange={(e) => setTestData(e.target.value)}
                    placeholder="Enter JSON test data"
                    className="border p-2 rounded w-full h-32"
                />
                <button onClick={applyFilter} className="bg-purple-500 text-white p-2 rounded mt-2">
                    <FontAwesomeIcon icon={faCheck} />
                </button>
                {testResult && (
                    <div className="mt-2">
                        <h3 className="font-semibold">Result:</h3>
                        <pre className="bg-gray-100 p-2 rounded">{JSON.stringify(testResult, null, 2)}</pre>
                    </div>
                )}
            </div>
        </div>
    );
};

export default StateDataFilterDialog;
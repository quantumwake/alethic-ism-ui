import React, { useState, useEffect } from 'react';
import useStore from "./store";
import StateConfigDataKeyDefinitionTypeHandler from "./StateConfigDataKeyDefinitionTypeHandler";

const configOptions = ['StateConfig', 'StateConfigLM', 'StateConfigDB'];

const StateOptions = ({ nodeId }) => {
    const [selectedConfigType, setSelectedConfigType] = useState('');
    // const [stateData, setStateData] = useState(null);
    // const updateNodeData = useStore((state) => state.updateNodeData)
    const nodeData = useStore(state => state.getNodeData(nodeId));
    const setNodeData = useStore(state => state.setNodeData);


    // Fetch state object data if objectId is provided
    useEffect(() => {
        const stateId = nodeData?.id
        if (stateId) {
            fetch(`/state/${stateId}`)
                .then(response => response.json())
                .then(data => {
                    // updateNode(data);
                    setSelectedConfigType(data.configType);
                })
                .catch(error => console.error('Error fetching state data:', error));
        }
    }, [nodeData]);

    useEffect(() => {
        setSelectedConfigType('')
    }, [nodeId]);

    const handleConfigTypeChange = (e) => {
        setSelectedConfigType(e.target.value);
    };

    const handleChange = (e) => {
        const value = e.target.value;
        switch (e.target.name) {
            case "label":
                setNodeData(nodeId, {label: value});
                break;
            case "version":
                setNodeData(nodeId, {version: value});
                break;
            default:
                break
        }
    };

    const saveChanges = () => {
        // Define save logic, potentially using `/state/create` endpoint
        // console.log('Saving changes:', stateData);
        // Use fetch API to POST data
    };

    if (!selectedConfigType && !nodeData?.id) {
        return (
            <div className="p-2">
                <label>Select Configuration Type:</label>
                <select
                    className="border border-gray-300 text-gray-600 h-10 pl-5 pr-10 bg-white hover:border-gray-400 focus:outline-none appearance-none"
                    onChange={handleConfigTypeChange} value={selectedConfigType}>

                    <option value="">Select an option</option>
                    {configOptions.map(option => (
                        <option key={option} value={option}>{option}</option>
                    ))}
                </select>
            </div>
        );
    }

    return (
        <div className="p-2">
            <form>
                {/* Form fields here, dynamically generated based on selectedConfigType or fetched data */}
                {selectedConfigType && <div>Form for {selectedConfigType}</div>}

                <input
                    type="text"
                    name="label"
                    placeholder="Label"
                    value={nodeData?.label || ''}
                    onChange={handleChange}
                />
                <input
                    type="text"
                    name="version"
                    placeholder="Version (optional)"
                    value={nodeData?.version || ''}
                    onChange={handleChange}
                />

                <StateConfigDataKeyDefinitionHandler />

                <button type="button"
                        className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                        onClick={saveChanges}>Save
                </button>
            </form>
        </div>
    );
};

export default StateOptions;
